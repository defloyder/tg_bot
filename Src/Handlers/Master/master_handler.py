import types
from datetime import datetime
import asyncio
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.types import InputMediaPhoto
from sqlalchemy.exc import IntegrityError
from aiogram.types import CallbackQuery

from database import Master, Booking
from database.database import SessionFactory
from database.models import MasterSchedule, UserSchedule
from database.repository import create_master
from logger_config import logger
from menu import ADMIN_ID, main_menu

router_master = Router(name="masters")


class AddMasterStates(StatesGroup):
    waiting_for_id = State()
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_photo = State()
    confirmation = State()



class EditMasterStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_photo = State()
    confirmation = State()


@router_master.callback_query(lambda c: c.data == "add_master")
async def start_adding_master(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if user_id in ADMIN_ID:
        await callback_query.answer()
        await callback_query.message.edit_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –º–∞—Å—Ç–µ—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
        await state.set_state(AddMasterStates.waiting_for_id)
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.")
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞.")

@router_master.message(AddMasterStates.waiting_for_id)
async def process_id(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    try:
        master_id = int(message.text.strip())
        if master_id <= 0:
            raise ValueError("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    with SessionFactory() as session:
        existing_master = session.query(Master).filter(Master.master_id == master_id).first()
        if existing_master:
            await message.answer("‚ö†Ô∏è –ú–∞—Å—Ç–µ—Ä —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID.")
            return

    await state.update_data(master_id=master_id)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    await state.set_state(AddMasterStates.waiting_for_name)


@router_master.message(AddMasterStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    master_name = message.text.strip()
    if not master_name:
        await message.answer("‚ö†Ô∏è –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(master_name=master_name)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(AddMasterStates.waiting_for_description)

@router_master.message(AddMasterStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    description = message.text.strip()
    if description.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        description = "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ"

    await state.update_data(master_description=description)
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞:")
    await state.set_state(AddMasterStates.waiting_for_photo)


@router_master.message(AddMasterStates.waiting_for_photo)
async def process_photo(message: Message, state: FSMContext):
    if message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    if message.photo:
        photo_id = message.photo[-1].file_id
        await state.update_data(master_photo=photo_id)
        await message.answer("‚úÖ –ú–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ (–¥–∞/–Ω–µ—Ç):")
        await state.set_state(AddMasterStates.confirmation)
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")


@router_master.message(AddMasterStates.confirmation)
async def confirm_master_addition(message: Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        data = await state.get_data()
        master_id = data.get("master_id")
        master_name = data.get("master_name")
        master_description = data.get("master_description")
        master_photo = data.get("master_photo")

        with SessionFactory() as session:
            try:
                new_master = Master(
                    master_id=master_id,
                    master_name=master_name,
                    master_description=master_description,
                    master_photo=master_photo
                )
                session.add(new_master)
                session.commit()
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–∞—Å—Ç–µ—Ä: {new_master.master_name} (ID: {new_master.master_id})")
                await message.answer(f"–ú–∞—Å—Ç–µ—Ä {new_master.master_name} (ID: {new_master.master_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            except IntegrityError as e:
                session.rollback()
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞: {e}")

        await state.clear()
    elif message.text.lower() == "–Ω–µ—Ç":
        await state.clear()
        await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")


@router_master.callback_query(lambda c: c.data == "edit_master")
async def edit_master(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id in ADMIN_ID:
        await callback_query.answer()

        with SessionFactory() as session:
            masters = session.query(Master).all()
            if not masters:
                await callback_query.message.edit_text("–ù–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                return

            keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=[])

            for master in masters:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ master_name –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–æ–µ
                master_name = master.master_name if master.master_name else "–ë–µ–∑ –∏–º–µ–Ω–∏"
                keyboard.inline_keyboard.append(
                    [InlineKeyboardButton(text=master_name, callback_data=f"edit_{master.master_id}")])

            keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")])
            await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞.")




@router_master.callback_query(lambda c: c.data.startswith("edit_"))
async def handle_master_edit(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if user_id in ADMIN_ID:
        master_id = int(callback_query.data.split("_")[1])

        with SessionFactory() as session:
            master = session.query(Master).filter(Master.master_id == master_id).first()

            if master:
                # –ù–∞—á–Ω–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                await state.set_state(EditMasterStates.waiting_for_name)
                await state.update_data(master_id=master.master_id,
                                        master_name=master.master_name,
                                        master_description=master.master_description,
                                        master_photo=master.master_photo)

                await callback_query.answer()
                await callback_query.message.edit_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞: {master.master_name}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {master.master_description}\n–§–æ—Ç–æ: {master.master_photo}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
            else:
                await callback_query.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞.")


@router_master.message(EditMasterStates.waiting_for_name)
async def process_name_edit(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    new_name = message.text.strip()
    if new_name.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        new_name = None  # –û—Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ä–æ–µ –∏–º—è, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è–µ–º

    data = await state.get_data()
    master_id = data["master_id"]
    with SessionFactory() as session:
        master = session.query(Master).filter(Master.master_id == master_id).first()
        if master:
            if new_name:
                master.master_name = new_name
            await state.update_data(master_name=new_name)
            await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
            await state.set_state(EditMasterStates.waiting_for_description)


@router_master.message(EditMasterStates.waiting_for_description)
async def process_description_edit(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    new_description = message.text.strip()
    if new_description.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        new_description = None  # –û—Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è–µ–º

    data = await state.get_data()
    master_id = data["master_id"]
    with SessionFactory() as session:
        master = session.query(Master).filter(Master.master_id == master_id).first()
        if master:
            if new_description:
                master.master_description = new_description
            await state.update_data(master_description=new_description)
            await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞:")
            await state.set_state(EditMasterStates.waiting_for_photo)

    @router_master.message(EditMasterStates.waiting_for_photo)
    async def process_photo_edit(message: Message, state: FSMContext):
        if message.text and message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await state.clear()
            await message.answer("–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
            return

        if message.photo:
            photo_id = message.photo[-1].file_id
            await state.update_data(master_photo=photo_id)
            await message.answer("–§–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ (–¥–∞/–Ω–µ—Ç):")
            await state.set_state(EditMasterStates.confirmation)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")


@router_master.message(EditMasterStates.confirmation)
async def confirm_master_edit(message: Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        data = await state.get_data()
        master_name = data.get("master_name")
        master_description = data.get("master_description")
        master_photo = data.get("master_photo")

        with SessionFactory() as session:
            master_id = data["master_id"]
            master = session.query(Master).filter(Master.master_id == master_id).first()
            if master:
                master.master_name = master_name if master_name else master.master_name
                master.master_description = master_description if master_description else master.master_description
                master.master_photo = master_photo if master_photo else master.master_photo
                session.commit()
                logger.info(f"–ú–∞—Å—Ç–µ—Ä {master.master_name} (ID: {master.master_id}) –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                await message.answer(f"–ú–∞—Å—Ç–µ—Ä {master.master_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        await state.clear()
    elif message.text.lower() == "–Ω–µ—Ç":
        await state.clear()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")


@router_master.callback_query(lambda c: c.data == "delete_master")
async def delete_master(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.from_user.id in ADMIN_ID:
        with SessionFactory() as session:
            masters = session.query(Master).all()
            if not masters:
                await callback_query.message.edit_text("–ù–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return

            keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=[])

            for master in masters:
                master_name = master.master_name if master.master_name else "–ë–µ–∑ –∏–º–µ–Ω–∏"
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
                keyboard.inline_keyboard.append(
                    [InlineKeyboardButton(text=master_name, callback_data=f"confirm_delete_{master.master_id}")])

            keyboard.inline_keyboard.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")])
            await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)


@router_master.callback_query(lambda c: c.data.startswith("confirm_delete_"))
async def confirm_master_deletion(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.from_user.id in ADMIN_ID:
        try:
            master_id = int(callback_query.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º master_id –∏–∑ callback
        except (IndexError, ValueError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ master_id –∏–∑ callback {callback_query.data}: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            return

        logger.info(f"–ê–¥–º–∏–Ω {callback_query.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ —Å ID {master_id}")

        with SessionFactory() as session:
            master = session.query(Master).filter(Master.master_id == master_id).first()

            if master:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å "cancelled" –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–µ
                active_bookings = session.query(Booking).filter(Booking.master_id == master_id, Booking.status != 'cancelled').all()

                if active_bookings:
                    await callback_query.message.edit_text(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ {master.master_name}, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏.")
                    return

                try:
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞
                    session.query(MasterSchedule).filter(MasterSchedule.master_id == master_id).delete()
                    logger.info(f"–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ {master.master_name} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")

                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º –º–∞—Å—Ç–µ—Ä–æ–º, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                    session.query(UserSchedule).filter(UserSchedule.user_id == master_id).delete()
                    logger.info(f"–í—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master.master_name} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")

                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ (–µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å)
                    session.query(Booking).filter(Booking.master_id == master_id).delete()
                    logger.info(f"–í—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ {master.master_name} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")

                    # –£–¥–∞–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
                    session.delete(master)
                    session.commit()

                    logger.info(f"–ú–∞—Å—Ç–µ—Ä {master.master_name} (ID: {master.master_id}) –±—ã–ª —É–¥–∞–ª–µ–Ω.")
                    await callback_query.message.edit_text(f"–ú–∞—Å—Ç–µ—Ä {master.master_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                except Exception as e:
                    session.rollback()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞ {master.master_name}: {e}")
                    await callback_query.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            else:
                await callback_query.message.edit_text("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")


@router_master.callback_query(lambda c: c.data == "main_menu")
async def back_to_main_menu(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    keyboard = main_menu(user_id)
    await callback_query.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)


@router_master.callback_query(lambda c: c.data == "masters")
async def show_masters_list(callback_query: CallbackQuery):
    with SessionFactory() as session:
        masters = session.query(Master).all()

    if masters:
        buttons = [
            [InlineKeyboardButton(text=f"‚öúÔ∏èÔ∏è {master.master_name}", callback_data=f"info_master_{master.master_id}")]
            for master in masters
        ]
        buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        if callback_query.message.text:
            try:
                await callback_query.message.edit_text(
                    "üîç –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:",
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
                await callback_query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        elif callback_query.message.photo or callback_query.message.video or callback_query.message.document:
            try:
                await callback_query.message.delete()
                await callback_query.message.answer(
                    "üîç –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:",
                    reply_markup=keyboard
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫ –º–µ–¥–∏–∞: {e}")
                await callback_query.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
    else:
        await callback_query.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.")


@router_master.callback_query(lambda c: c.data.startswith("info_master_"))
async def show_master_info(callback_query: CallbackQuery):
    try:
        master_id = int(callback_query.data.split("_")[2])
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ —Å ID: {master_id}")

        with SessionFactory() as session:
            master = session.query(Master).filter(Master.master_id == master_id).first()

            if not master:
                await callback_query.answer("‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return

            master_info = f"‚öúÔ∏è {master.master_name}\nüìù {master.master_description}"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="masters")]
            ])

            if master.master_photo:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    await callback_query.message.edit_media(
                        media=InputMediaPhoto(media=master.master_photo, caption=master_info),
                        reply_markup=keyboard
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä–∞: {e}")
                    await callback_query.message.edit_text(master_info, reply_markup=keyboard)
            else:
                await callback_query.message.edit_text(master_info, reply_markup=keyboard)
    except (IndexError, ValueError):
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback: {callback_query.data}")
        await callback_query.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–µ: {e}")
        await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)