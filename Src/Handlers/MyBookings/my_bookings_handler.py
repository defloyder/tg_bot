import logging
from datetime import datetime

from aiogram import Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.exc import SQLAlchemyError

from database import Booking, Master, User
from database.database import SessionFactory
from menu import my_bookings_menu

logger = logging.getLogger(__name__)

router_bookings = Router(name="bookings")


@router_bookings.callback_query(lambda c: c.data == "my_bookings")
async def process_my_bookings(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–ø–∏—Å–∏'."""
    await callback_query.answer()
    await callback_query.message.edit_text(
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:</b>",
        reply_markup=my_bookings_menu(),
        parse_mode="HTML"
    )


@router_bookings.callback_query(lambda c: c.data == "active_bookings")
async def process_active_bookings(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    current_time = datetime.now()

    try:
        with SessionFactory() as session:
            is_master = session.query(Master).filter(Master.master_id == user_id).first()

            if is_master:
                active_bookings = session.query(Booking).filter(
                    Booking.master_id == user_id,
                    Booking.status == 'new',
                    Booking.booking_datetime > current_time
                ).order_by(Booking.booking_datetime).all()
            else:
                active_bookings = session.query(Booking).filter(
                    Booking.user_id == user_id,
                    Booking.status == 'new',
                    Booking.booking_datetime > current_time
                ).order_by(Booking.booking_datetime).all()

            if not active_bookings:
                await callback_query.message.edit_text(
                    "‚Ñπ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.</b>",
                    reply_markup=back_to_my_bookings_menu(),
                    parse_mode="HTML"
                )
                return

            buttons = []
            for booking in active_bookings:
                booking_date = booking.booking_datetime.strftime('%d.%m.%Y')
                booking_time = booking.booking_datetime.strftime('%H:%M')

                if is_master:
                    user = session.query(User).filter(User.user_id == booking.user_id).first()
                    user_name = user.username if user else "<i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</i>"
                    label = f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_name}"
                else:
                    master = session.query(Master).filter(Master.master_id == booking.master_id).first()
                    master_name = master.master_name if master else "<i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</i>"
                    label = f"‚öúÔ∏è –ú–∞—Å—Ç–µ—Ä: {master_name}"

                buttons.append([
                    InlineKeyboardButton(
                        text=f"üìÖ {booking_date} ‚è∞ {booking_time} - {label}",
                        callback_data=f"view_active_booking_{booking.booking_id}"
                    )
                ])

            buttons.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="my_bookings")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback_query.message.edit_text(
                "<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏:</b>",
                reply_markup=markup,
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        await callback_query.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_my_bookings_menu(),
            parse_mode="HTML"
        )


@router_bookings.callback_query(lambda c: c.data == "booking_history")
async def process_user_history(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π'."""
    user_id = callback_query.from_user.id
    current_time = datetime.now()

    try:
        with SessionFactory() as session:
            is_master = session.query(Master).filter(Master.master_id == user_id).first()

            if is_master:
                user_history_bookings = session.query(Booking).filter(
                    Booking.master_id == user_id,
                    (Booking.booking_datetime < current_time) |
                    (Booking.status == "cancelled")
                ).order_by(Booking.booking_datetime.desc()).all()
            else:
                user_history_bookings = session.query(Booking).filter(
                    Booking.user_id == user_id,
                    (Booking.booking_datetime < current_time) |
                    (Booking.status == "cancelled")
                ).order_by(Booking.booking_datetime.desc()).all()

            if not user_history_bookings:
                await callback_query.message.edit_text(
                    "‚Ñπ <b>–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏.</b> –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö –∑–¥–µ—Å—å.",
                    reply_markup=back_to_my_bookings_menu(),
                    parse_mode="HTML"
                )
                return

            buttons = []
            for booking in user_history_bookings:
                booking_date = booking.booking_datetime.strftime('%d.%m.%Y')
                booking_time = booking.booking_datetime.strftime('%H:%M')

                if is_master:
                    user = session.query(User).filter(User.user_id == booking.user_id).first()
                    user_name = user.username if user else "<i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</i>"
                    label = f"üë§ –ö–ª–∏–µ–Ω—Ç: {user_name}"
                else:
                    master = session.query(Master).filter(Master.master_id == booking.master_id).first()
                    master_name = master.master_name if master else "<i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</i>"
                    label = f"‚öúÔ∏è –ú–∞—Å—Ç–µ—Ä: {master_name}"

                status = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞" if booking.status == "cancelled" else "‚úÖ –ü—Ä–æ—à–µ–¥—à–∞—è"

                buttons.append([
                    InlineKeyboardButton(
                        text=f"üìÖ {booking_date} ‚è∞ {booking_time} - {status} - {label}",
                        callback_data="ignore"
                    )
                ])

            buttons.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="my_bookings")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback_query.message.edit_text(
                "<b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π:</b>",
                reply_markup=markup,
                parse_mode="HTML"
            )

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy: {e}")
        await callback_query.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_my_bookings_menu(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_my_bookings_menu(),
            parse_mode="HTML"
        )


@router_bookings.callback_query(lambda c: c.data.startswith("view_active_booking_"))
async def process_view_active_booking(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏."""
    booking_id = int(callback_query.data.split("_")[-1])

    try:
        with SessionFactory() as session:
            booking = session.query(Booking).filter(Booking.booking_id == booking_id).first()

            if not booking:
                await callback_query.message.edit_text("‚ùå <b>–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>.",
                                                       reply_markup=back_to_my_bookings_menu(),
                                                       parse_mode="HTML")
                return

            is_master = session.query(Master).filter(Master.master_id == callback_query.from_user.id).first()

            master = session.query(Master).filter(Master.master_id == booking.master_id).first()
            master_name = master.master_name if master else "<i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</i>"

            user = session.query(User).filter(User.user_id == booking.user_id).first()
            user_display_name = user.username if user and user.username else "<i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</i>"

            booking_date = booking.booking_datetime.strftime('%d.%m.%Y')
            booking_time = booking.booking_datetime.strftime('%H:%M')

            if is_master:
                details = (
                    f"<b>üìÖ –î–∞—Ç–∞:</b> {booking_date}\n"
                    f"<b>‚è∞ –í—Ä–µ–º—è:</b> {booking_time}\n"
                    f"<b>üë§ –ö–ª–∏–µ–Ω—Ç:</b> {user_display_name}\n"
                    f"<b>üîó ID –∫–ª–∏–µ–Ω—Ç–∞:</b> <a href='tg://user?id={booking.user_id}'>{booking.user_id}</a>\n"
                )
            else:
                details = (
                    f"<b>üìÖ –î–∞—Ç–∞:</b> {booking_date}\n"
                    f"<b>‚è∞ –í—Ä–µ–º—è:</b> {booking_time}\n"
                    f"<b>‚öúÔ∏è –ú–∞—Å—Ç–µ—Ä:</b> {master_name}\n"
                    f"‚õ©Ô∏è<b> –ê–¥—Ä–µ—Å:</b> –≥. –ú–æ—Å–∫–≤–∞, –º–µ—Ç—Ä–æ –í–ª–∞–¥—ã–∫–∏–Ω–æ, —É–ª. –ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è 14–∞\n"

                )

            buttons = [
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_booking_{booking.booking_id}")],
                [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="active_bookings")]
            ]
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback_query.message.edit_text(details, reply_markup=markup, parse_mode="HTML")

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy: {e}")
        await callback_query.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_my_bookings_menu(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏</b>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_my_bookings_menu(),
            parse_mode="HTML"
        )


@router_bookings.callback_query(lambda c: c.data.startswith("cancel_booking_"))
async def process_cancel_booking(callback_query: CallbackQuery):
    booking_id = int(callback_query.data.split("_")[-1])

    try:
        with SessionFactory() as session:
            booking = session.query(Booking).filter(Booking.booking_id == booking_id).first()

            if not booking:
                await callback_query.message.edit_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=back_to_my_bookings_menu())
                return

            if booking.status == "cancelled":
                await callback_query.message.edit_text("–≠—Ç–∞ –∑–∞–ø–∏—Å—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                                                       reply_markup=back_to_my_bookings_menu())
                return

            session.execute(
                Booking.__table__.update().where(Booking.booking_id == booking_id).values(status="cancelled")
            )
            session.commit()

            logger.debug(f"–ó–∞–ø–∏—Å—å ID {booking.booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

            if booking.user_id:
                try:
                    await callback_query.bot.send_message(
                        booking.user_id,
                        f"üîî –í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {booking.booking_datetime.strftime('%d.%m.%Y %H:%M')} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–æ–º.",
                    )
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {booking.user_id}.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {booking.user_id}: {e}")

            await callback_query.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ {booking_id}: {e}")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_my_bookings_menu()
        )
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ {booking_id}: {e}")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_my_bookings_menu()
        )


def back_to_my_bookings_menu():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é '–ú–æ–∏ –∑–∞–ø–∏—Å–∏'."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="my_bookings")]
    ])
