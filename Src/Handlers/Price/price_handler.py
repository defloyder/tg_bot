import logging
import os

from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message
from aiogram.types import FSInputFile
from sqlalchemy.exc import SQLAlchemyError

from database.database import SessionFactory
from database.models import PriceList

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)


class PriceListState(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_photo = State()
    waiting_for_confirmation = State()


router_price = Router(name="price")


@router_price.callback_query(lambda c: c.data == "add_price_list")
async def add_price_list_start(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:")
    await state.set_state(PriceListState.waiting_for_name)


@router_price.message(PriceListState.waiting_for_name)
async def process_price_list_name(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.")
        return

    await state.update_data(name=message.text)
    await message.answer("üìú –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:")
    await state.set_state(PriceListState.waiting_for_description)


@router_price.message(PriceListState.waiting_for_description)
async def process_price_list_description(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.")
        return

    await state.update_data(price_description=message.text)
    await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:")
    await state.set_state(PriceListState.waiting_for_photo)


@router_price.message(PriceListState.waiting_for_photo)
async def process_price_list_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    price_description = data.get("price_description")

    if not message.photo:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.")
        return

    photo = message.photo[-1]
    file_id = photo.file_id

    try:
        file = await message.bot.get_file(file_id)
        os.makedirs("photos", exist_ok=True)
        extension = file.file_path.split('.')[-1]
        price_photo = f"photos/price_list_{file.file_id}.{extension}"
        await message.bot.download_file(file.file_path, destination=price_photo)

        new_price_list = PriceList(
            name=data['name'],
            price_description=price_description,
            price_photo=price_photo
        )

        with SessionFactory() as session:
            session.add(new_price_list)
            session.commit()

        await message.answer("‚úÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        await state.clear()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.")
        await state.clear()


@router_price.callback_query(lambda c: c.data == "view_price_lists")
async def view_price_lists(callback_query: CallbackQuery):
    logger.info("view_price_lists callback triggered.")
    try:
        with SessionFactory() as session:
            price_lists = session.query(PriceList).all()

        if price_lists:
            buttons = [
                [InlineKeyboardButton(text=price_list.name, callback_data=f"view_price_{price_list.price_id}")]
                for price_list in price_lists
            ]
            buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            try:
                # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await callback_query.message.delete()
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        else:
            # –ï—Å–ª–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                await callback_query.message.delete()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            await callback_query.message.answer("‚ö†Ô∏è –ü—Ä–∞–π—Å-–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤: {e}")
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await callback_query.message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await callback_query.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤.")


@router_price.callback_query(lambda c: c.data.startswith("view_price_"))
async def show_price_list(callback_query: CallbackQuery):
    price_list_id = int(callback_query.data.split("_")[-1])

    with SessionFactory() as session:
        price_list = session.query(PriceList).filter_by(price_id=price_list_id).first()

    if price_list:
        description = price_list.price_description
        price_photo = price_list.price_photo
        back_button = InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_price_lists")
        markup = InlineKeyboardMarkup(inline_keyboard=[[back_button]])

        if os.path.exists(price_photo):
            input_file = FSInputFile(price_photo, filename=os.path.basename(price_photo))
            await callback_query.message.edit_media(
                media=types.InputMediaPhoto(media=input_file, caption=f"{description}"),  # –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç 'media'
                reply_markup=markup
            )
        else:
            await callback_query.message.edit_text(f"{description}", reply_markup=markup)
    else:
        await callback_query.message.edit_text("‚ö†Ô∏è –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router_price.callback_query(lambda c: c.data == "delete_price_list")
async def delete_price_list_start(callback_query: CallbackQuery):
    await callback_query.answer()
    try:
        with SessionFactory() as session:
            price_lists = session.query(PriceList).all()

        if price_lists:
            buttons = [
                [InlineKeyboardButton(text=price_list.name,
                                      callback_data=f"confirm_delete_price_{price_list.price_id}")]
                for price_list in price_lists
            ]
            buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        else:
            await callback_query.message.answer("‚ö†Ô∏è –ü—Ä–∞–π—Å-–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤.")


@router_price.callback_query(lambda c: c.data.startswith("confirm_delete_price_"))
async def confirm_price_list_deletion(callback_query: CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º price_list_id –∏–∑ callback_data
        price_list_id = int(callback_query.data.split("_")[-1])
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ price_list_id –∏–∑ callback {callback_query.data}: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    try:
        with SessionFactory() as session:
            price_list = session.query(PriceList).filter_by(price_id=price_list_id).first()
            if price_list:
                session.delete(price_list)
                session.commit()
                await callback_query.message.answer("‚úÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
            else:
                await callback_query.message.answer("‚ö†Ô∏è –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {e}")
        await callback_query.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.")
