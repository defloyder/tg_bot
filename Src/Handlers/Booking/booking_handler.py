import re
from datetime import datetime, timedelta
import time
from aiogram import Router, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.exc import SQLAlchemyError
from yookassa import Payment
from Src.Handlers.Booking.service import generate_calendar
from Src.Handlers.MyBookings.my_bookings_handler import back_to_my_bookings_menu
from database import Booking, Master
from database.database import SessionFactory
from database.models import MasterSchedule, UserSchedule
from database.repository import create_booking
from logger_config import logger
from menu import main_menu
from yookassa import Configuration

import aioredis

redis_client = aioredis.from_url("redis://localhost", decode_responses=True)


scheduler = AsyncIOScheduler()
blocked_times = {}


Configuration.account_id = "497898"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à shopId
Configuration.secret_key = "live_b1msS56RfztJrOmB-3K2ii9gMUTp8TRhbS2FRe6hmtU"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à secret key
router_booking = Router(name="booking")
ADMIN_ID = [475953677, 962757762]
TIME_WINDOW = 10
MAX_CLICKS = 5


# –ö–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Redis
async def is_flood(user_id: int, max_clicks: int, time_window: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–ª—É–¥–∞ —á–µ—Ä–µ–∑ Redis.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param max_clicks: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö time_window
    :param time_window: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞–∂–∞—Ç–∏—è
    :return: True, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –∏–Ω–∞—á–µ False
    """
    key = f"flood:{user_id}"

    current_clicks = await redis_client.incr(key)

    if current_clicks == 1:
        await redis_client.expire(key, time_window)

    if current_clicks > max_clicks:
        return True

    return False



@router_booking.callback_query(lambda c: c.data == 'booking')
async def process_callback_booking(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_flood(user_id, MAX_CLICKS, TIME_WINDOW):
        await callback_query.answer("‚ùå –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º! –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π.",
                                    show_alert=True)
        return

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' –∑–∞–ø—É—â–µ–Ω.")
    await callback_query.answer()

    try:
        with SessionFactory() as session:
            masters = session.query(Master).all()

        if not masters:
            await callback_query.message.edit_text("‚ö†Ô∏è *–ú–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.*")
            return

        master_menu = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"‚öúÔ∏è {master.master_name}",
                                      callback_data=f"booking_master_{master.master_id}")]
                for master in masters
            ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        )

        await callback_query.message.edit_text("üë®‚Äçüîß –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=master_menu)
        logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –º–∞—Å—Ç–µ—Ä–æ–≤.")

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router_booking.callback_query(lambda c: c.data.startswith('booking_master_'))
async def process_callback_master(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_flood(user_id, MAX_CLICKS, TIME_WINDOW):
        await callback_query.answer("‚ùå –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º! –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π.",
                                    show_alert=True)
        return
    try:
        data_parts = callback_query.data.split('_')
        if len(data_parts) != 3 or data_parts[0] != "booking" or data_parts[1] != "master":
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_query.data}")
            await callback_query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            return

        master_id = data_parts[2]

        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–∞—Å—Ç–µ—Ä–∞ —Å ID: {master_id}")

        calendar_markup = await generate_calendar(master_id)
        if not calendar_markup:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}")
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=None
            )
            return

        await callback_query.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=calendar_markup)
        logger.debug(f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {callback_query.data}: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã.", show_alert=True)


@router_booking.callback_query(lambda c: c.data.startswith('date_'))
async def process_callback_date(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_flood(user_id, MAX_CLICKS, TIME_WINDOW):
        await callback_query.answer("‚ùå –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º! –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π.",
                                    show_alert=True)
        return
    try:
        data = callback_query.data.split('_')
        master_id, date = data[1], data[2]
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏: {date}, –º–∞—Å—Ç–µ—Ä ID: {master_id}")
        await callback_query.answer()

        start_time = 10
        end_time = 22
        time_slots = [f"{hour:02}:00" for hour in range(start_time, end_time + 1)]

        with SessionFactory() as session:
            selected_date = datetime.strptime(date, '%Y-%m-%d').date()

            user_schedule_entry = session.query(UserSchedule).filter(
                UserSchedule.user_id == master_id,
                UserSchedule.date == selected_date
            ).first()

            day_blocked = user_schedule_entry and user_schedule_entry.is_blocked

            blocked_times = set()
            if not day_blocked:
                master_schedule = session.query(MasterSchedule).filter(
                    MasterSchedule.master_id == master_id,
                    MasterSchedule.date == selected_date,
                    MasterSchedule.is_blocked == True
                ).all()

                for entry in master_schedule:
                    blocked_hour = entry.start_time.hour
                    blocked_times.add(f"{blocked_hour:02}:00")

            time_buttons = []
            row = []
            for time in time_slots:
                if day_blocked or time in blocked_times:
                    row.append(InlineKeyboardButton(text=f"‚ùå {time}", callback_data="ignore"))
                else:
                    row.append(
                        InlineKeyboardButton(text=f"üïí {time}",
                                             callback_data=f"time_{master_id}_{selected_date}_{time}:00"))

                if len(row) == 3:
                    time_buttons.append(row)
                    row = []

            if row:
                time_buttons.append(row)

            time_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"master_{master_id}")])

            await callback_query.message.edit_text(
                "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=time_buttons)
            )
            logger.debug(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏.", show_alert=True)


@router_booking.callback_query(lambda c: c.data.startswith('time_'))
async def process_callback_time(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_flood(user_id, MAX_CLICKS, TIME_WINDOW):
        await callback_query.answer("‚ùå –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º! –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π.",
                                    show_alert=True)
        return
    pattern = r'time_(\d+)_(\d{4}-\d{2}-\d{2})_(\d{2}):(\d{2})'
    match = re.match(pattern, callback_query.data)

    if not match:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback: {callback_query.data}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    master_id, date, hour, minute = match.groups()
    selected_time = f"{hour}:{minute}"
    user_id = callback_query.from_user.id

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è {selected_time} –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id} –Ω–∞ –¥–∞—Ç—É {date}")

    try:
        with SessionFactory() as session:
            blocked_slots = set(
                entry.start_time.strftime('%H:%M') for entry in session.query(MasterSchedule).filter(
                    MasterSchedule.master_id == master_id,
                    MasterSchedule.date == datetime.strptime(date, '%Y-%m-%d').date(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é –¥–∞—Ç—É
                    MasterSchedule.is_blocked == True
                ).all()
            )

            if selected_time in blocked_slots:
                await callback_query.message.edit_text(
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è {selected_time} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"date_{master_id}_{date}")]]
                    )
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–±—Ä–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è {selected_time}.")
                return

            active_booking = session.query(Booking).filter(
                Booking.user_id == user_id,
                Booking.status == "new",
                Booking.booking_datetime > datetime.now()
            ).first()

            if active_booking:
                time_diff = datetime.now() - active_booking.booking_datetime
                if time_diff.days < 7:
                    booking_datetime = active_booking.booking_datetime.strftime('%d.%m.%Y %H:%M')
                    await callback_query.message.edit_text(
                        f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ {booking_datetime}. "
                        f"–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {7 - time_diff.days} –¥–Ω–µ–π.",
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[[InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
                        )
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ä–∞–Ω–µ–µ, —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π.")
                    return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    minute_buttons = InlineKeyboardMarkup(
        inline_keyboard=[  # –ö–Ω–æ–ø–∫–∏ –º–∏–Ω—É—Ç
            [
                InlineKeyboardButton(text="00 –º–∏–Ω—É—Ç", callback_data=f"minute_{master_id}_{date}_{hour}_{minute}_00"),
                InlineKeyboardButton(text="15 –º–∏–Ω—É—Ç", callback_data=f"minute_{master_id}_{date}_{hour}_{minute}_15"),
                InlineKeyboardButton(text="30 –º–∏–Ω—É—Ç", callback_data=f"minute_{master_id}_{date}_{hour}_{minute}_30"),
                InlineKeyboardButton(text="45 –º–∏–Ω—É—Ç", callback_data=f"minute_{master_id}_{date}_{hour}_{minute}_45"),
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"date_{master_id}_{date}")]
        ]
    )

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {selected_time}.")

    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{selected_time}</b>. –î–∞–≤–∞–π—Ç–µ —Ç–µ–ø–µ—Ä—å —É—Ç–æ—á–Ω–∏–º –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—èüòΩüòª:",
        reply_markup=minute_buttons
    )


@router_booking.callback_query(lambda c: c.data.startswith('minute_'))
async def process_callback_minute(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_flood(user_id, MAX_CLICKS, TIME_WINDOW):
        await callback_query.answer("‚ùå –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º! –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π.",
                                    show_alert=True)
        return
    pattern = r'minute_(\d+)_(\d{4}-\d{2}-\d{2})_(\d{2})_(\d{2})_(\d{2})'
    match = re.match(pattern, callback_query.data)

    if not match:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback: {callback_query.data}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    master_id, date, hour, minute, selected_minute = match.groups()
    user_id = callback_query.from_user.id

    selected_time = datetime.strptime(f"{hour}:{minute}", '%H:%M')
    selected_minute = int(selected_minute)  # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã
    final_time = selected_time + timedelta(minutes=selected_minute)

    final_time_str = final_time.strftime('%H:%M')

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è {final_time_str} –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id} –Ω–∞ –¥–∞—Ç—É {date}.")

    try:
        with SessionFactory() as session:
            active_booking = session.query(Booking).filter(
                Booking.user_id == user_id,
                Booking.status == "new",
                Booking.booking_datetime > datetime.now()
            ).first()

            if active_booking:
                time_diff = datetime.now() - active_booking.booking_datetime
                if time_diff.days < 7:
                    booking_datetime = active_booking.booking_datetime.strftime('%d.%m.%Y %H:%M')
                    await callback_query.message.edit_text(
                        f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ <b>{booking_datetime}</b>. "
                        f"–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {7 - time_diff.days} –¥–Ω–µ–π.",
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[[InlineKeyboardButton(text="üèöÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
                        )
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ä–∞–Ω–µ–µ, —á–µ–º —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π.")
                    return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    confirm_buttons = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É", callback_data=f"confirm_{master_id}_{date}_{final_time_str}"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")
        ]]
    )

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –í—Ä–µ–º—è: {final_time_str}.")

    await callback_query.message.edit_text(
        f"–ó–∞–ø–∏—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞  <b>{date}</b> <b>{final_time_str}</b>.üí´ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–∏–º –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É!üíñü¶Ñ",
        reply_markup=confirm_buttons
    )


@router_booking.callback_query(lambda c: c.data.startswith('confirm_') and not c.data.startswith('confirm_delete_'))
async def process_confirm_time(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏: {callback_query.data}")

    if await is_flood(user_id, MAX_CLICKS, TIME_WINDOW):
        logger.warning(f"–§–ª—É–¥-–∞—Ç–∞–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π.")
        await callback_query.answer("‚ùå –ù–µ —Å–ø–µ—à–∏—Ç–µ, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—ÉüòΩ",
                                    show_alert=True)
        return

    pattern = r'confirm_(\d+)_([\d]{4}-[\d]{2}-[\d]{2})_([\d]{2}:[\d]{2})'
    match = re.match(pattern, callback_query.data)

    if not match:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback: {callback_query.data}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    master_id, date, time = match.groups()
    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: –º–∞—Å—Ç–µ—Ä {master_id}, –¥–∞—Ç–∞ {date}, –≤—Ä–µ–º—è {time}")

    try:
        booking_datetime = datetime.strptime(f"{date} {time}", '%Y-%m-%d %H:%M')
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏: {date} {time} ‚Äî {e}")
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    logger.info(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã: {booking_datetime}")

    try:
        with SessionFactory() as session:
            overlapping_booking = session.query(Booking).filter(
                Booking.master_id == master_id,
                Booking.status == "new",
                Booking.booking_datetime <= booking_datetime,
                (Booking.booking_datetime + timedelta(hours=4)) > booking_datetime
            ).first()

            if overlapping_booking:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è {booking_datetime} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                await callback_query.answer(
                    "‚õî –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.",
                    show_alert=True
                )
                return

            logger.info(f"–í—Ä–µ–º—è {booking_datetime} –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏.")

            try:
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                payment = Payment.create({
                    "amount": {"value": "500.00", "currency": "RUB"},
                    "confirmation": {
                        "type": "redirect",
                        "return_url": f"https://t.me/pink_reserve_bot?payment_id={{payment.id}}"
                    },
                    "capture": True,
                    "description": f"–û–ø–ª–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ {date} {time}",
                    "receipt": {
                        "customer": {
                            "full_name": callback_query.from_user.full_name or "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                            "email": "chigirevaarina@gmail.com",
                            "phone": "79296430546"
                        },
                        "items": [
                            {
                                "description": f"–£—Å–ª—É–≥–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ {date} {time}",
                                "quantity": "1.00",
                                "amount": {"value": "500.00", "currency": "RUB"},
                                "vat_code": "1",
                                "payment_mode": "full_payment",
                                "payment_subject": "service"
                            }
                        ]
                    }
                })
                confirmation_url = payment.confirmation.confirmation_url
                payment_id = payment.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞
                logger.info(f"–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—Éüíñ", callback_data=f"paid_{payment_id}")]
                ])

                await callback_query.message.edit_text(
                    f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å—å–±–∞ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—Éü¶Ñüíñ\n\n"
                    f"[–û–ø–ª–∞—Ç–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã‚öúÔ∏è]({confirmation_url})",
                    parse_mode="Markdown",
                    reply_markup=keyboard  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–ª–∞—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
                return

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                            show_alert=True)
                return

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router_booking.callback_query(lambda c: c.data.startswith('paid_'))
async def process_payment_confirmation(callback_query: CallbackQuery):
    payment_id = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∞' –¥–ª—è payment_id {payment_id}")

    try:
        payment = Payment.find_one(payment_id)
        payment_status = payment.status

        if payment_status == 'succeeded':
            with SessionFactory() as session:
                master_id = session.query(Booking.master_id).filter_by(payment_id=payment_id).scalar()
                booking_datetime = session.query(Booking.booking_datetime).filter_by(payment_id=payment_id).scalar()

                if not master_id or not booking_datetime:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Å—Ç–µ—Ä–µ –∏–ª–∏ –¥–∞—Ç–µ –¥–ª—è payment_id {payment_id}")
                    await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                    return

                new_booking = Booking(
                    booking_datetime=booking_datetime,
                    status="new",
                    user_id=user_id,
                    master_id=master_id,
                    payment_id=payment_id
                )
                session.add(new_booking)
                session.commit()
                logger.info(f"–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                await callback_query.message.edit_text(
                    f"‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                    f"üìÖ –î–∞—Ç–∞: {new_booking.booking_datetime.strftime('%Y-%m-%d')}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {new_booking.booking_datetime.strftime('%H:%M')}\n"
                    f"‚õ©Ô∏è –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ú–æ—Å–∫–≤–∞, –º–µ—Ç—Ä–æ –í–ª–∞–¥—ã–∫–∏–Ω–æ, —É–ª. –ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è 14–∞",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
                            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–∞—Å—Ç–µ—Ä—É", callback_data=f"write_to_master_{new_booking.master_id}")]
                        ]
                    )
                )
        else:
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ —Å payment_id {payment_id} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
            confirmation_url = payment.confirmation.confirmation_url
            await callback_query.message.edit_text(
                f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å—å–±–∞ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—Éü¶Ñüíñ\n\n"
                f"[–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã‚öúÔ∏è]({confirmation_url})\n\n"
                "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞.",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—Éüíñ", callback_data=f"paid_{payment_id}")]
                    ]
                )
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {payment_id}: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")


async def block_time_slots(session, master_id, booking_datetime):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞."""
    slots_to_block = [booking_datetime, booking_datetime + timedelta(hours=1)]

    for time_slot in slots_to_block:
        day_of_week = time_slot.weekday()

        existing_entry = session.query(MasterSchedule).filter(
            MasterSchedule.master_id == master_id,
            MasterSchedule.date == time_slot.date(),
            MasterSchedule.start_time == time_slot.time(),
        ).first()

        if not existing_entry:
            new_schedule = MasterSchedule(
                master_id=master_id,
                day_of_week=day_of_week,
                date=time_slot.date(),
                start_time=time_slot.time(),
                is_blocked=True
            )
            session.add(new_schedule)
            logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–ª–æ—Ç: {time_slot} –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}.")
    session.commit()

def unblock_time_slot(session, master_id, booking_datetime):
    """
    –°–Ω–∏–º–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞.
    """
    try:
        blocked_slot = session.query(MasterSchedule).filter(
            MasterSchedule.master_id == master_id,
            MasterSchedule.date == booking_datetime.date(),
            MasterSchedule.start_time == booking_datetime.time(),
            MasterSchedule.is_blocked == True
        ).first()

        if blocked_slot:
            blocked_slot.is_blocked = False
            session.commit()
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç {booking_datetime} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ ID {master_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞: {e}")


async def handle_delete_booking(callback_query, master_id):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}.")
    await callback_query.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")


@router_booking.callback_query(lambda c: c.data == 'cancel_booking')
async def process_cancel_booking(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    await callback_query.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=await main_menu(user_id)
    )


@router_booking.callback_query(lambda c: c.data.startswith('master_'))
async def process_callback_master_return(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_flood(user_id, MAX_CLICKS, TIME_WINDOW):
        await callback_query.answer("‚ùå –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º! –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π.",
                                    show_alert=True)
        return
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback_data: {callback_query.data}")
    try:
        data_parts = callback_query.data.split('_')
        if len(data_parts) != 2:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_query.data}")
            await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            return

        master_id = data_parts[1]
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å ID: {master_id}")

        calendar_markup = await generate_calendar(master_id)
        if not calendar_markup:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}")
            await callback_query.message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=None
            )
            return

        await callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=calendar_markup
        )
        logger.debug(f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {callback_query.data}: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã.", show_alert=True)


@router_booking.callback_query(lambda c: c.data.startswith('edit_booking_'))
async def process_edit_booking(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_flood(user_id, MAX_CLICKS, TIME_WINDOW):
        await callback_query.answer("‚ùå –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º! –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π.",
                                    show_alert=True)
        return
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' –∑–∞–ø–∏—Å–∏, –≥–¥–µ –º–∞—Å—Ç–µ—Ä –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º, —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –º–µ–Ω—è—é—Ç—Å—è."""
    try:
        booking_id = int(callback_query.data.split("_")[-1])
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ callback: {callback_query.data}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    try:
        with SessionFactory() as session:
            booking = session.query(Booking).filter(Booking.booking_id == booking_id).first()

            if not booking:
                await callback_query.message.edit_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=back_to_my_bookings_menu())
                return

            master_name = session.query(Master.master_name).filter(Master.master_id == booking.master_id).first()
            master_name = master_name[0] if master_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            old_booking_datetime = booking.booking_datetime.strftime('%d.%m.%Y %H:%M')

            calendar_markup = await generate_calendar(booking.master_id)
            await callback_query.message.edit_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Å—Ç–µ—Ä–∞: {master_name}, –¥–∞—Ç–∞: {old_booking_datetime}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.",
                reply_markup=calendar_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                               reply_markup=back_to_my_bookings_menu())


@router_booking.callback_query(lambda c: c.data.startswith('cancel_booking_'))
async def cancel_booking(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    if await is_flood(user_id, MAX_CLICKS, TIME_WINDOW):
        await callback_query.answer(
            "‚ùå –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º! –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π.",
            show_alert=True
        )
        return

    try:
        pattern = r'cancel_booking_(\d+)'
        match = re.match(pattern, callback_query.data)

        if not match:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback: {callback_query.data}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            return

        booking_id = int(match.group(1))

        with SessionFactory() as session:
            booking = session.query(Booking).filter(Booking.booking_id == booking_id).first()

            if not booking:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å: ID {booking_id}")
                await callback_query.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return

            if booking.status == "cancelled":
                logger.info(f"–ó–∞–ø–∏—Å—å ID {booking_id} —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                await callback_query.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
                return

            master_id = booking.master_id
            booking_datetime = booking.booking_datetime

            session.query(MasterSchedule).filter(
                MasterSchedule.master_id == master_id,
                MasterSchedule.date == booking_datetime.date(),
                MasterSchedule.start_time.in_([
                    booking_datetime.time(),
                    (booking_datetime + timedelta(hours=1)).time()
                ])
            ).delete()

            booking.status = "cancelled"
            session.commit()

            logger.info(f"–ó–∞–ø–∏—Å—å ID {booking_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID {user_id}.")

            await callback_query.message.edit_text(
                "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
                )
            )

            master = session.query(Master).filter(Master.master_id == master_id).first()
            if master:
                try:
                    await callback_query.bot.send_message(
                        master.master_id,
                        f"üìÖ –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.full_name} "
                        f"–Ω–∞ {booking_datetime.strftime('%d.%m.%Y %H:%M')} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∞—Å—Ç–µ—Ä—É ID {master.master_id}.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É {master.master_id}: {e}")

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {e}")
        await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)


async def generate_time_buttons(session, master_id, date):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    """
    start_time = 10
    end_time = 22
    time_slots = [f"{hour:02}:00" for hour in range(start_time, end_time + 1)]

    blocked_times = set(
        entry.start_time.strftime('%H:%M') for entry in session.query(MasterSchedule).filter(
            MasterSchedule.master_id == master_id,
            MasterSchedule.date == date,
            MasterSchedule.is_blocked == True
        ).all()
    )

    time_buttons = []
    row = []
    for time in time_slots:
        if time in blocked_times:
            row.append(InlineKeyboardButton(text=f"‚ùå {time}", callback_data="ignore"))
        else:
            row.append(
                InlineKeyboardButton(text=f"üïí {time}",
                                     callback_data=f"time_{master_id}_{date}_{time}:00")
            )

        if len(row) == 3:
            time_buttons.append(row)
            row = []

    if row:
        time_buttons.append(row)

    time_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"master_{master_id}")])
    return InlineKeyboardMarkup(inline_keyboard=time_buttons)


async def send_booking_reminder(bot: Bot, user_id: int, master_name: str, booking_time: datetime):
    try:
        reminder_text = (
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –£ –≤–∞—Å –∑–∞–ø–∏—Å—å –∫ –º–∞—Å—Ç–µ—Ä—É {master_name} "
            f"–Ω–∞ {booking_time.strftime('%d.%m.%Y %H:%M')}. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–π—Ç–∏ –≤–æ–≤—Ä–µ–º—è! "
            "üôè –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—Å —É–≤–∏–¥–µ—Ç—å!"
            "‚õ©Ô∏è –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ú–æ—Å–∫–≤–∞, –º–µ—Ç—Ä–æ –í–ª–∞–¥—ã–∫–∏–Ω–æ, —É–ª. –ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∞—è 14–∞"
        )
        await bot.send_message(user_id, reminder_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def schedule_booking_reminder(booking_datetime, bot, user_id, master_name):
    reminder_time = booking_datetime - timedelta(days=1)
    reminder_time = reminder_time.replace(hour=8, minute=0, second=0, microsecond=0)

    if reminder_time < datetime.now():
        logger.info(
            f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ ({reminder_time}). "
            f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}."
        )
        await send_booking_reminder(bot, user_id, master_name, booking_datetime)
        return

    job = scheduler.add_job(
        send_booking_reminder,
        'date',
        run_date=reminder_time,
        args=[bot, user_id, master_name, booking_datetime]
    )

    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {reminder_time}. Job ID: {job.id}")


@router_booking.callback_query(lambda c: c.data.startswith('date_'))
async def process_callback_date(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if await is_flood(user_id, MAX_CLICKS, TIME_WINDOW):
        await callback_query.answer("‚ùå –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º! –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π.",
                                    show_alert=True)
        return
    data = callback_query.data.split('_')
    master_id, date = data[1], data[2]
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏: {date}, –º–∞—Å—Ç–µ—Ä ID: {master_id}")
    await callback_query.answer()

    try:
        with SessionFactory() as session:
            schedule = session.query(MasterSchedule).filter(
                MasterSchedule.master_id == master_id
            ).all()
            available_times = []
            for item in schedule:
                available_times.append(f"{item.start_time} - {item.end_time}")

            time_buttons = []
            for time in available_times:
                time_buttons.append(
                    [InlineKeyboardButton(text=f"‚è∞ {time}", callback_data=f"time_{master_id}_{date}_{time}")])

            markup = InlineKeyboardMarkup(inline_keyboard=time_buttons)
            await callback_query.message.edit_text("üïí –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏.", show_alert=True)

@router_booking.callback_query(lambda c: c.data.startswith('time_'))
async def process_callback_time(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

