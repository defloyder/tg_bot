import calendar
from tempfile import NamedTemporaryFile
from datetime import datetime, time as datetime_time, timedelta

import aiogram
import pandas as pd
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import FSInputFile
from dateutil.relativedelta import relativedelta
from openpyxl import load_workbook
from openpyxl.styles import Alignment
from sqlalchemy.exc import SQLAlchemyError

from Src.Handlers.Schedule.master_schedule_handler import toggle_day_block
from database import Booking, Master
from database.database import SessionFactory
from database.models import User, MasterSchedule, UserSchedule
from logger_config import logger
from menu import admin_panel, main_menu, price_list_settings_menu

router_admin = Router(name="admin")

ADMIN_ID = [475953677, 962757762]


class PriceListState(StatesGroup):
    waiting_for_description = State()
    waiting_for_photo = State()


price_message_id = None


@router_admin.callback_query(lambda c: c.data == "admin_panel")
async def process_callback_admin_panel(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id in ADMIN_ID:
        await callback_query.answer()
        await callback_query.message.edit_text("üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel())
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.")
    else:
        await callback_query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.")


@router_admin.callback_query(lambda c: c.data == "main_menu")
async def main_menu_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    global price_message_id
    if price_message_id:
        try:
            await callback_query.message.bot.delete_message(
                chat_id=callback_query.message.chat.id,
                message_id=price_message_id
            )
            price_message_id = None
        except aiogram.exceptions.TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–π—Å–æ–º: {e}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å–æ–º: {e}")

    if callback_query.message:
        try:
            reply_markup = await main_menu(user_id)

            await callback_query.message.edit_text(
                "üè† –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é.",
                reply_markup=reply_markup
            )
        except aiogram.exceptions.TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    else:
        logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


@router_admin.callback_query(lambda c: c.data == "all_booking_history")
async def process_all_booking_history(callback_query: CallbackQuery):
    try:
        with SessionFactory() as session:
            all_bookings = session.query(
                Booking.booking_id,
                Booking.booking_datetime,
                Booking.user_id,
                Master.master_name,
                Booking.status
            ).join(Master, Master.master_id == Booking.master_id).all()

            if not all_bookings:
                await callback_query.message.edit_text(
                    "üìÖ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.",
                    reply_markup=admin_panel()
                )
                return

            sorted_bookings = sorted(all_bookings, key=lambda x: (
                x.status == "active",
                x.booking_datetime < datetime.now(),
                x.status == "cancelled"
            ))

            buttons = []
            for booking in sorted_bookings:
                status = (
                    "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞" if booking.status == "cancelled" else
                    "üü† –ü—Ä–æ—à–µ–¥—à–∞—è" if booking.booking_datetime < datetime.now() else
                    "üü¢ –ê–∫—Ç–∏–≤–Ω–∞—è"
                )

                cancel_button = None
                if booking.status == "active" and booking.booking_datetime > datetime.now():
                    cancel_button = InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_booking_{booking.booking_id}"
                    )

                button_row = [
                    InlineKeyboardButton(
                        text=f"{status} | {booking.booking_datetime.strftime('%d.%m.%Y %H:%M')} "
                             f"| –ú–∞—Å—Ç–µ—Ä: {booking.master_name} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {booking.user_id} | {booking.booking_id}",
                        callback_data=f"view_booking_{booking.booking_id}"
                    )
                ]

                if cancel_button:
                    button_row.append(cancel_button)
                buttons.append(button_row)

            buttons.append(
                [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel", callback_data="export_bookings_to_excel")])
            buttons.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="delete_all_bookings")])
            buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback_query.message.edit_text("üìú –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π):",
                                                   reply_markup=markup)

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )


@router_admin.callback_query(lambda c: c.data == "delete_all_bookings")
async def delete_all_bookings(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–ø–∏—Å–∫–∞."""
    try:
        with SessionFactory() as session:
            session.query(Booking).delete()
            session.commit()

            await callback_query.message.edit_text(
                "üßπ –í—Å–µ –∑–∞–ø–∏—Å–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.",
                reply_markup=admin_panel()
            )
            logger.info("–í—Å–µ –∑–∞–ø–∏—Å–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )


@router_admin.callback_query(lambda c: c.data == "export_bookings_to_excel")
async def export_bookings_to_excel(callback_query: CallbackQuery):
    try:
        with SessionFactory() as session:
            all_bookings = session.query(
                Booking.booking_id,
                Booking.booking_datetime,
                Booking.user_id,
                Master.master_name,
                Booking.status
            ).join(Master, Master.master_id == Booking.master_id).all()

            if not all_bookings:
                await callback_query.answer("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", show_alert=True)
                return

            data = [
                {
                    "ID –∑–∞–ø–∏—Å–∏": booking.booking_id,
                    "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è": booking.booking_datetime.strftime('%d.%m.%Y %H:%M'),
                    "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": int(booking.user_id),
                    "–ò–º—è –º–∞—Å—Ç–µ—Ä–∞": booking.master_name,
                    "–°—Ç–∞—Ç—É—Å": booking.status or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                }
                for booking in all_bookings
            ]

            df = pd.DataFrame(data)

            now = datetime.now().strftime('%Y-%m-%d_%H-%M')
            file_name = f"–ò—Å—Ç–æ—Ä–∏—è_–∑–∞–ø–∏—Å–µ–π_{now}.xlsx"

            with NamedTemporaryFile(suffix=".xlsx", delete=False) as temp_file:
                file_path = temp_file.name
                df.to_excel(file_path, index=False)

            wb = load_workbook(file_path)
            ws = wb.active

            for column_cells in ws.columns:
                max_length = 0
                col_letter = column_cells[0].column_letter
                for cell in column_cells:
                    if cell.value:
                        cell.alignment = Alignment(wrap_text=True)
                        max_length = max(max_length, len(str(cell.value)))
                ws.column_dimensions[col_letter].width = max_length + 2

            wb.save(file_path)
            wb.close()
            file = FSInputFile(file_path, filename=file_name)
            await callback_query.message.answer_document(
                file,
                caption=f"–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω: {file_name}"
            )
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–ø–∏—Å–µ–π –≤ Excel: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )


@router_admin.callback_query(lambda c: c.data.startswith("view_booking_"))
async def view_booking_details(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏."""
    booking_id = int(callback_query.data.split("_")[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø–∏—Å–∏

    try:
        with SessionFactory() as session:
            booking = session.query(
                Booking.booking_id,
                Booking.booking_datetime,
                Booking.user_id,
                Master.master_name,
                Booking.status,
            ).join(Master, Master.master_id == Booking.master_id).filter(
                Booking.booking_id == booking_id
            ).first()

            if not booking:
                await callback_query.message.edit_text(
                    "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                    reply_markup=admin_panel()
                )
                return

            status = (
                "‚õî –û—Ç–º–µ–Ω–µ–Ω–∞" if booking.status == "cancelled" else
                "üü† –ü—Ä–æ—à–µ–¥—à–∞—è" if booking.booking_datetime < datetime.now() else
                "üü¢ –ê–∫—Ç–∏–≤–Ω–∞—è"
            )

            details = (
                f"üÜî ID –∑–∞–ø–∏—Å–∏: {booking.booking_id}\n"
                f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {booking.booking_datetime.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚öúÔ∏è –ú–∞—Å—Ç–µ—Ä: {booking.master_name}\n"
            )

            if booking.user_id:
                user = session.query(User).filter(User.user_id == booking.user_id).first()
                if user:
                    if user.username:
                        user_display_name = f"@{user.username}"
                    elif user.full_name:
                        user_display_name = user.full_name
                    else:
                        user_display_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                else:
                    user_display_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            else:
                user_display_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            details += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display_name}\n"
                f"üí¨ ID –∫–ª–∏–µ–Ω—Ç–∞: <a href='tg://user?id={booking.user_id}'>{booking.user_id}</a>\n"
                f"üîñ –°—Ç–∞—Ç—É—Å: {status}\n"
            )

            logger.info(f"–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏: {details}")

            buttons = []
            if status == "üü¢ –ê–∫—Ç–∏–≤–Ω–∞—è" and booking.booking_datetime > datetime.now():
                cancel_button = InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_booking_{booking.booking_id}"
                )
                buttons.append([cancel_button])

            buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="all_booking_history")])

            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.edit_text(details, reply_markup=markup)

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–∏ {booking_id}: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–∏ {booking_id}: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )


@router_admin.callback_query(lambda c: c.data.startswith("cancel_booking_"))
async def cancel_booking(callback_query: CallbackQuery):
    booking_id = int(callback_query.data.split("_")[-1])

    try:
        with SessionFactory() as session:
            booking = session.query(
                Booking.booking_id,
                Booking.booking_datetime,
                Booking.user_id,
                Master.master_name,
                Booking.status,
            ).filter(Booking.booking_id == booking_id).first()

            if not booking:
                await callback_query.answer("‚ùå –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return

            if booking.status == "cancelled":
                await callback_query.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
                return

            session.execute(
                Booking.__table__.update().where(Booking.booking_id == booking_id).values(status="cancelled")
            )
            session.commit()

            logger.info(f"–ó–∞–ø–∏—Å—å —Å ID {booking_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

            if booking.user_id:
                try:
                    await callback_query.bot.send_message(
                        booking.user_id,
                        f"üîî –í–∞—à–∞ –∑–∞–ø–∏—Å—å –∫ –º–∞—Å—Ç–µ—Ä—É {booking.master_name} –Ω–∞ {booking.booking_datetime.strftime('%d.%m.%Y %H:%M')} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    )
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {booking.user_id}.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {booking.user_id}: {e}")

            await callback_query.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await callback_query.message.edit_text(
                f"üî¥ –ó–∞–ø–∏—Å—å —Å ID {booking_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=admin_panel()
            )

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ {booking_id}: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )


@router_admin.callback_query(lambda c: c.data == "price_list_settings")
async def handle_price_list_settings(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤'."""
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–º:",
        reply_markup=price_list_settings_menu()
    )


@router_admin.callback_query(lambda c: c.data == "open_master_schedule_settings")
async def open_master_schedule_settings(callback_query: CallbackQuery):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    if user_id not in ADMIN_ID:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –º–∞—Å—Ç–µ—Ä–æ–≤ –±–µ–∑ –ø—Ä–∞–≤.")
        await callback_query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.", show_alert=True)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with SessionFactory() as session:
            masters = session.query(Master).all()
        logger.info(f"–ú–∞—Å—Ç–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {[master.master_id for master in masters]}")

        # –ï—Å–ª–∏ –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if not masters:
            logger.info("–ú–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await callback_query.message.edit_text("‚ö†Ô∏è –ú–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞
        master_menu = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=f"üë®‚Äçüîß {master.master_name}",
                                                   callback_data=f"edit_calendar_{master.master_id}")] for master in masters] +
                            [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=master_menu)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Å—Ç–µ—Ä–æ–≤: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)



@router_admin.callback_query(lambda c: c.data.startswith("edit_calendar_"))
async def edit_master_calendar(callback_query: CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞.")

    if user_id not in ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –º–∞—Å—Ç–µ—Ä–∞ –±–µ–∑ –ø—Ä–∞–≤.")
        await callback_query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.", show_alert=True)
        return

    try:
        master_id = int(callback_query.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞—Å—Ç–µ—Ä–∞
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –º–∞—Å—Ç–µ—Ä–∞ —Å ID {master_id}.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º master_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(master_id=master_id)
        logger.debug(f"master_id={master_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        calendar_markup = await generate_schedule_calendar(master_id)
        if not calendar_markup:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}.")
            await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å.", reply_markup=None)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await callback_query.message.edit_text(
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=calendar_markup
        )
        logger.info(f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Å—Ç–µ—Ä–∞ {master_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–∞—Å—Ç–µ—Ä–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router_admin.callback_query(lambda c: c.data.startswith("toggle_block_"))
async def toggle_block(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è."""
    try:
        user_id = callback_query.from_user.id
        logger.debug(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å: {user_id}")

        # –†–∞–∑–±–æ—Ä callback_data
        data_parts = callback_query.data.split("_")
        logger.debug(f"–†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback_query.data: {data_parts}")

        if len(data_parts) != 4:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_query.data}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        _, master_id_str, date_str = data_parts[1], data_parts[2], data_parts[3]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ master_id ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ
        if not master_id_str.isdigit():
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π master_id: {master_id_str}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–µ—Ä–∞.")
            return

        master_id = int(master_id_str)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –≤ –æ–±—ä–µ–∫—Ç datetime.date
        try:
            selected_date = datetime.strptime(date_str, '%Y-%m-%d').date()
            logger.debug(f"–î–∞—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {selected_date}")
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
            return

        logger.debug(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –¥–∞—Ç—ã {selected_date} (–º–∞—Å—Ç–µ—Ä: {master_id})")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        await toggle_block_date(callback_query, master_id, selected_date)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_data {callback_query.data}: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def toggle_day_block(session, master_id, selected_date, block_status):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ–≥–æ –¥–Ω—è."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏ –¥–∞—Ç—ã
        schedules_to_update = session.query(MasterSchedule).filter(
            MasterSchedule.master_id == master_id,
            MasterSchedule.date == selected_date
        ).all()

        for schedule in schedules_to_update:
            schedule.is_blocked = block_status

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω—è
        user_schedule_entry = session.query(UserSchedule).filter(
            UserSchedule.user_id == master_id,
            UserSchedule.date == selected_date
        ).first()

        if user_schedule_entry:
            user_schedule_entry.is_blocked = block_status
        else:
            new_user_schedule = UserSchedule(
                user_id=master_id,
                date=selected_date,
                day_of_week=selected_date.weekday() + 1,
                is_blocked=block_status
            )
            session.add(new_user_schedule)

        session.commit()
        logger.info(f"–î–µ–Ω—å {selected_date} {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if block_status else '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'} –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}.")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–Ω—è {selected_date}: {e}")
        session.rollback()
        return False


async def toggle_block_date(callback_query: CallbackQuery, master_id: int, selected_date: datetime.date):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –∏ –¥–∞—Ç—ã."""
    start_time = 10
    end_time = 22
    time_slots = [f"{hour:02}:00" for hour in range(start_time, end_time + 1)]

    try:
        logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id} –Ω–∞ {selected_date}.")

        with SessionFactory() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
            blocked_slots = set(
                entry.start_time.strftime('%H:%M') for entry in session.query(MasterSchedule).filter(
                    MasterSchedule.master_id == master_id,
                    MasterSchedule.date == selected_date,
                    MasterSchedule.is_blocked == True
                ).all()
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω—è
            user_schedule_entry = session.query(UserSchedule).filter(
                UserSchedule.user_id == master_id,
                UserSchedule.date == selected_date
            ).first()

            is_day_blocked = user_schedule_entry.is_blocked if user_schedule_entry else False

        logger.debug(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ {selected_date}: {blocked_slots}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        time_buttons = []
        for time in time_slots:
            if time in blocked_slots:
                time_buttons.append(
                    InlineKeyboardButton(text=f"‚ùå {time}", callback_data=f"unblock_time_{master_id}_{selected_date}_{time}")
                )
            else:
                time_buttons.append(
                    InlineKeyboardButton(text=f"{time}", callback_data=f"block_time_{master_id}_{selected_date}_{time}")
                )

        logger.debug(f"–ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ {selected_date}: {[btn.text for btn in time_buttons]}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è/–æ—Ç–∫—Ä—ã—Ç–∏—è –¥–Ω—è
        if is_day_blocked:
            time_buttons.append(
                InlineKeyboardButton(text="‚úÖ –û—Ç–∫—Ä—ã—Ç—å –¥–µ–Ω—å", callback_data=f"open_day_{master_id}_{selected_date}")
            )
        else:
            time_buttons.append(
                InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–µ–Ω—å", callback_data=f"close_day_{master_id}_{selected_date}")
            )

        time_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_calendar_{master_id}")
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(
            inline_keyboard=[time_buttons[i:i + 3] for i in range(0, len(time_buttons), 3)]
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è {selected_date.strftime('%d.%m.%Y')}:",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è {selected_date}: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")


@router_admin.callback_query(lambda c: c.data.startswith("back_to_calendar_"))
async def back_to_calendar(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –º–∞—Å—Ç–µ—Ä–∞."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º master_id –∏–∑ callback_data
        master_id = int(callback_query.data.split("_")[3])
        user_id = callback_query.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞—Å—Ç–µ—Ä–∞ {master_id}.")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
        calendar_markup = await generate_schedule_calendar(master_id)
        if not calendar_markup:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}.")
            await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å.", reply_markup=None)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        await callback_query.message.edit_text(
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=calendar_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –º–∞—Å—Ç–µ—Ä–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router_admin.callback_query(lambda c: c.data.startswith("open_day_"))
async def open_day(callback_query: CallbackQuery):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–Ω—è: —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."""
    try:
        # –†–∞–∑–±–æ—Ä callback_data
        data_parts = callback_query.data.split("_")
        master_id_str, date_str = data_parts[2], data_parts[3]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º master_id
        if not master_id_str.isdigit():
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π master_id: {master_id_str}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–µ—Ä–∞.")
            return

        master_id = int(master_id_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
        try:
            selected_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
            return

        with SessionFactory() as session:
            success = await toggle_day_block(session, master_id, selected_date, block_status=False)

        if success:
            await callback_query.answer(f"–î–µ–Ω—å {selected_date.strftime('%d.%m.%Y')} –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.")
            await toggle_block_date(callback_query, master_id, selected_date)
        else:
            await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–Ω—è {selected_date}: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router_admin.callback_query(lambda c: c.data.startswith("close_day_"))
async def close_day(callback_query: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–Ω—è: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤."""
    try:
        # –†–∞–∑–±–æ—Ä callback_data
        data_parts = callback_query.data.split("_")
        master_id_str, date_str = data_parts[2], data_parts[3]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º master_id
        if not master_id_str.isdigit():
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π master_id: {master_id_str}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–µ—Ä–∞.")
            return

        master_id = int(master_id_str)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
        try:
            selected_date = datetime.strptime(date_str, '%Y-%m-%d').date()
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {date_str}")
            await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
            return

        with SessionFactory() as session:
            success = await toggle_day_block(session, master_id, selected_date, block_status=True)

        if success:
            await callback_query.answer(f"–î–µ–Ω—å {selected_date.strftime('%d.%m.%Y')} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.")
            await toggle_block_date(callback_query, master_id, selected_date)
        else:
            await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–Ω—è: {e}")
        await callback_query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



@router_admin.callback_query(lambda c: c.data.startswith("block_time_") or c.data.startswith("unblock_time_"))
async def block_hour(c: CallbackQuery):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã."""
    try:
        # –†–∞–∑–±–æ—Ä callback_data
        data_parts = c.data.split("_")
        if len(data_parts) != 5:  # –§–æ—Ä–º–∞—Ç: block_time_{master_id}_{date}_{time}
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {c.data}")
            await c.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        action, master_id_str, date_str, time_str = data_parts[0], data_parts[2], data_parts[3], data_parts[4]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º master_id
        if not master_id_str.isdigit():
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π master_id: {master_id_str}")
            await c.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–µ—Ä–∞.")
            return

        master_id = int(master_id_str)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        try:
            selected_date = datetime.strptime(date_str, '%Y-%m-%d').date()
            start_time = datetime.strptime(time_str, '%H:%M').time()
        except ValueError:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏: {date_str}, {time_str}")
            await c.answer("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.")
            return

        logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {action} –¥–ª—è {selected_date} {start_time} (–º–∞—Å—Ç–µ—Ä: {master_id})")

        with SessionFactory() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            schedule_entry = session.query(MasterSchedule).filter(
                MasterSchedule.master_id == master_id,
                MasterSchedule.date == selected_date,
                MasterSchedule.start_time == start_time
            ).first()

            if schedule_entry:
                # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                schedule_entry.is_blocked = not schedule_entry.is_blocked
                updated_status = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if not schedule_entry.is_blocked else "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç {start_time} {updated_status}.")
            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
                new_schedule = MasterSchedule(
                    master_id=master_id,
                    date=selected_date,
                    start_time=start_time,
                    day_of_week=selected_date.weekday() + 1,
                    is_blocked=True
                )
                session.add(new_schedule)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {selected_date} {start_time} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            session.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
        await toggle_block_date(c, master_id, selected_date)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await c.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def generate_schedule_calendar(master_id, month_offset=0, state=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –º–∞—Å—Ç–µ—Ä–∞."""
    now = datetime.now() + relativedelta(months=month_offset)
    days_in_month = calendar.monthrange(now.year, now.month)[1]
    start_of_month = datetime(now.year, now.month, 1).date()
    first_weekday = start_of_month.weekday()

    month_name = now.strftime('%B %Y')
    calendar_buttons = [[InlineKeyboardButton(text=month_name, callback_data="ignore")]]  # –ö–Ω–æ–ø–∫–∞ –º–µ—Å—è—Ü–∞

    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    calendar_buttons.append([InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days])

    # –°–±–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    with SessionFactory() as session:
        try:
            blocked_dates_master = set(
                schedule.date for schedule in session.query(MasterSchedule).filter(
                    MasterSchedule.master_id == master_id,
                    MasterSchedule.is_blocked == True,
                    MasterSchedule.date >= start_of_month,
                    MasterSchedule.date <= start_of_month + timedelta(days=days_in_month - 1)
                ).all()
            )

            blocked_dates_user = set(
                schedule.date for schedule in session.query(UserSchedule).filter(
                    UserSchedule.user_id == master_id,
                    UserSchedule.is_blocked == True,
                    UserSchedule.date >= start_of_month,
                    UserSchedule.date <= start_of_month + timedelta(days=days_in_month - 1)
                ).all()
            )

            blocked_dates = blocked_dates_master | blocked_dates_user  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã

            fully_blocked_dates = set(
                schedule.date for schedule in session.query(UserSchedule).filter(
                    UserSchedule.user_id == master_id,
                    UserSchedule.is_blocked == True,
                    UserSchedule.date >= start_of_month,
                    UserSchedule.date <= start_of_month + timedelta(days=days_in_month - 1)
                ).all()
            )

        except SQLAlchemyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}: {e}")
            blocked_dates = set()
            fully_blocked_dates = set()

    current_day = 1
    while current_day <= days_in_month:
        week = []

        for i in range(first_weekday):
            week.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

        while current_day <= days_in_month and len(week) < 7:
            current_date = start_of_month + timedelta(days=current_day - 1)
            day_str = current_date.strftime('%d')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏ (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            if current_date in fully_blocked_dates:
                week.append(
                    InlineKeyboardButton(text=f"{day_str}‚ùå", callback_data=f"toggle_block_{master_id}_{current_date}"))
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏ (–¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            elif current_date in blocked_dates:
                week.append(
                    InlineKeyboardButton(text=f"{day_str}üü†", callback_data=f"toggle_block_{master_id}_{current_date}"))
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–Ω–µ–π
            elif current_date < datetime.now().date():
                week.append(InlineKeyboardButton(text=f"{day_str}‚ùå", callback_data="ignore"))
            else:
                week.append(
                    InlineKeyboardButton(text=day_str, callback_data=f"toggle_block_{master_id}_{current_date}"))

            current_day += 1

        calendar_buttons.append(week)

        first_weekday = 0

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    calendar_buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"prev_month_{month_offset - 1}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"next_month_{month_offset + 1}")
    ])

    if state:
        calendar_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])

    else:
        calendar_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])

    return InlineKeyboardMarkup(inline_keyboard=calendar_buttons)


@router_admin.callback_query(lambda c: c.data.startswith("prev_month_") or c.data.startswith("next_month_"))
async def change_month(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–∞.
    """
    user_id = callback_query.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ—Å—è—Ü.")

    if user_id not in ADMIN_ID:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–µ—Å—è—Ü –±–µ–∑ –ø—Ä–∞–≤.")
        await callback_query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–µ–Ω—é.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (master_id)
    state_data = await state.get_data()
    master_id = state_data.get("master_id")
    if not master_id:
        logger.warning(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –≤—ã–±—Ä–∞–Ω –º–∞—Å—Ç–µ—Ä.")
        await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –º–µ—Å—è—Ü–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ (–∏–∑ callback_data)
    month_offset = int(callback_query.data.split("_")[2])

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ —Å –Ω–æ–≤—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º
    calendar_markup = await generate_schedule_calendar(master_id, month_offset)
    if not calendar_markup:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id}.")
        await callback_query.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å.", reply_markup=None)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await callback_query.message.edit_text(
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞:",
        reply_markup=calendar_markup
    )
    logger.info(f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ {master_id} –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º –º–µ—Å—è—Ü–µ–º.")