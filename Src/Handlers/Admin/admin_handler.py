import os
from datetime import datetime
from tempfile import NamedTemporaryFile
from typing import Union

import aiogram
import pandas as pd
from aiogram import Router
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import FSInputFile
from aiogram.types import Message
from openpyxl import load_workbook
from openpyxl.styles import Alignment
from sqlalchemy import Date
from sqlalchemy.exc import SQLAlchemyError

from Src.Handlers.Booking.service import generate_calendar
from database import Booking, Master
from database.database import SessionFactory
from database.models import PriceList, User
from logger_config import logger
from menu import admin_panel, main_menu

router_admin = Router(name="admin")

ADMIN_ID = [475953677, 962757762]


class PriceListState(StatesGroup):
    waiting_for_description = State()
    waiting_for_photo = State()


price_message_id = None

@router_admin.callback_query(lambda c: c.data == "admin_panel")
async def process_callback_admin_panel(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id in ADMIN_ID:
        await callback_query.answer()
        await callback_query.message.edit_text("üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel())
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.")
    else:
        await callback_query.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.")


@router_admin.callback_query(lambda c: c.data == "main_menu")
async def main_menu_handler(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å–æ–º, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    global price_message_id
    if price_message_id:
        try:
            await callback_query.message.bot.delete_message(
                chat_id=callback_query.message.chat.id,
                message_id=price_message_id
            )
            price_message_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        except aiogram.exceptions.TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–π—Å–æ–º: {e}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–π—Å–æ–º: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if callback_query.message:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reply_markup = await main_menu(user_id)

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback_query.message.edit_text(
                "üè† –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é.",
                reply_markup=reply_markup
            )
        except aiogram.exceptions.TelegramBadRequest as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    else:
        logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


@router_admin.callback_query(lambda c: c.data == "all_booking_history")
async def process_all_booking_history(callback_query: CallbackQuery):
    try:
        with SessionFactory() as session:
            all_bookings = session.query(
                Booking.booking_id,
                Booking.booking_datetime,
                Booking.user_id,
                Master.master_name,
                Booking.status
            ).join(Master, Master.master_id == Booking.master_id).all()

            if not all_bookings:
                await callback_query.message.edit_text(
                    "üìÖ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.",
                    reply_markup=admin_panel()
                )
                return

            sorted_bookings = sorted(all_bookings, key=lambda x: (
                x.status == "active",
                x.booking_datetime < datetime.now(),
                x.status == "cancelled"
            ))

            buttons = []
            for booking in sorted_bookings:
                status = (
                    "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞" if booking.status == "cancelled" else
                    "üü† –ü—Ä–æ—à–µ–¥—à–∞—è" if booking.booking_datetime < datetime.now() else
                    "üü¢ –ê–∫—Ç–∏–≤–Ω–∞—è"
                )

                cancel_button = None
                if booking.status == "active" and booking.booking_datetime > datetime.now():
                    cancel_button = InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_booking_{booking.booking_id}"
                    )

                button_row = [
                    InlineKeyboardButton(
                        text=f"{status} | {booking.booking_datetime.strftime('%d.%m.%Y %H:%M')} "
                             f"| –ú–∞—Å—Ç–µ—Ä: {booking.master_name} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {booking.user_id} | {booking.booking_id}",
                        callback_data=f"view_booking_{booking.booking_id}"
                    )
                ]

                if cancel_button:
                    button_row.append(cancel_button)
                buttons.append(button_row)

            buttons.append(
                [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Excel", callback_data="export_bookings_to_excel")])
            buttons.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="delete_all_bookings")])
            buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            await callback_query.message.edit_text("üìú –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π):",
                                                   reply_markup=markup)

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )


@router_admin.callback_query(lambda c: c.data == "delete_all_bookings")
async def delete_all_bookings(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–ø–∏—Å–∫–∞."""
    try:
        with SessionFactory() as session:
            session.query(Booking).delete()
            session.commit()

            await callback_query.message.edit_text(
                "üßπ –í—Å–µ –∑–∞–ø–∏—Å–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.",
                reply_markup=admin_panel()
            )
            logger.info("–í—Å–µ –∑–∞–ø–∏—Å–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )

@router_admin.callback_query(lambda c: c.data == "export_bookings_to_excel")
async def export_bookings_to_excel(callback_query: CallbackQuery):
    try:
        with SessionFactory() as session:
            all_bookings = session.query(
                Booking.booking_id,
                Booking.booking_datetime,
                Booking.user_id,
                Master.master_name,
                Booking.status
            ).join(Master, Master.master_id == Booking.master_id).all()

            if not all_bookings:
                await callback_query.answer("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", show_alert=True)
                return

            data = [
                {
                    "ID –∑–∞–ø–∏—Å–∏": booking.booking_id,
                    "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è": booking.booking_datetime.strftime('%d.%m.%Y %H:%M'),
                    "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": int(booking.user_id),  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
                    "–ò–º—è –º–∞—Å—Ç–µ—Ä–∞": booking.master_name,
                    "–°—Ç–∞—Ç—É—Å": booking.status or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
                }
                for booking in all_bookings
            ]

            df = pd.DataFrame(data)

            now = datetime.now().strftime('%Y-%m-%d_%H-%M')
            file_name = f"–ò—Å—Ç–æ—Ä–∏—è_–∑–∞–ø–∏—Å–µ–π_{now}.xlsx"

            with NamedTemporaryFile(suffix=".xlsx", delete=False) as temp_file:
                file_path = temp_file.name
                df.to_excel(file_path, index=False)

            wb = load_workbook(file_path)
            ws = wb.active

            for column_cells in ws.columns:
                max_length = 0
                col_letter = column_cells[0].column_letter  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—É–∫–≤—É –∫–æ–ª–æ–Ω–∫–∏
                for cell in column_cells:
                    if cell.value:
                        cell.alignment = Alignment(wrap_text=True)  # –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞
                        max_length = max(max_length, len(str(cell.value)))
                ws.column_dimensions[col_letter].width = max_length + 2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É

            wb.save(file_path)
            wb.close()
            file = FSInputFile(file_path, filename=file_name)
            await callback_query.message.answer_document(
                file,
                caption=f"–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω: {file_name}"
            )
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–ø–∏—Å–µ–π –≤ Excel: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–ø–∏—Å–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )

@router_admin.callback_query(lambda c: c.data.startswith("view_booking_"))
async def view_booking_details(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏."""
    booking_id = int(callback_query.data.split("_")[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø–∏—Å–∏

    try:
        with SessionFactory() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ ID
            booking = session.query(
                Booking.booking_id,
                Booking.booking_datetime,
                Booking.user_id,
                Master.master_name,
                Booking.status,
            ).join(Master, Master.master_id == Booking.master_id).filter(
                Booking.booking_id == booking_id
            ).first()

            if not booking:
                await callback_query.message.edit_text(
                    "‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
                    reply_markup=admin_panel()
                )
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
            status = (
                "‚õî –û—Ç–º–µ–Ω–µ–Ω–∞" if booking.status == "cancelled" else
                "üü† –ü—Ä–æ—à–µ–¥—à–∞—è" if booking.booking_datetime < datetime.now() else
                "üü¢ –ê–∫—Ç–∏–≤–Ω–∞—è"
            )

            details = (
                f"üÜî ID –∑–∞–ø–∏—Å–∏: {booking.booking_id}\n"
                f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {booking.booking_datetime.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚öúÔ∏è –ú–∞—Å—Ç–µ—Ä: {booking.master_name}\n"
            )

            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –∑–∞–ø–∏—Å—å—é
            if booking.user_id:
                user = session.query(User).filter(User.user_id == booking.user_id).first()
                if user:
                    if user.username:  # –ï—Å–ª–∏ –µ—Å—Ç—å username
                        user_display_name = f"@{user.username}"
                    elif user.full_name:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è
                        user_display_name = user.full_name
                    else:  # –ï—Å–ª–∏ –Ω–∏ username, –Ω–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç
                        user_display_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                else:
                    user_display_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            else:
                user_display_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

            details += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display_name}\n"
                f"üí¨ ID –∫–ª–∏–µ–Ω—Ç–∞: <a href='tg://user?id={booking.user_id}'>{booking.user_id}</a>\n"
                f"üîñ –°—Ç–∞—Ç—É—Å: {status}\n"
            )

            logger.info(f"–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏: {details}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            buttons = []
            if status == "üü¢ –ê–∫—Ç–∏–≤–Ω–∞—è" and booking.booking_datetime > datetime.now():
                cancel_button = InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_booking_{booking.booking_id}"
                )
                buttons.append([cancel_button])

            buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="all_booking_history")])

            markup = InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback_query.message.edit_text(details, reply_markup=markup)

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–∏ {booking_id}: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–∏ {booking_id}: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )

@router_admin.callback_query(lambda c: c.data.startswith("cancel_booking_"))
async def cancel_booking(callback_query: CallbackQuery):
    booking_id = int(callback_query.data.split("_")[-1])

    try:
        with SessionFactory() as session:
            booking = session.query(
                Booking.booking_id,
                Booking.booking_datetime,
                Booking.user_id,
                Master.master_name,
                Booking.status,
            ).filter(Booking.booking_id == booking_id).first()

            if not booking:
                await callback_query.answer("‚ùå –ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return

            if booking.status == "cancelled":
                await callback_query.answer("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞.", show_alert=True)
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
            session.execute(
                Booking.__table__.update().where(Booking.booking_id == booking_id).values(status="cancelled")
            )
            session.commit()

            logger.info(f"–ó–∞–ø–∏—Å—å —Å ID {booking_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

            if booking.user_id:
                try:
                    await callback_query.bot.send_message(
                        booking.user_id,
                        f"üîî –í–∞—à–∞ –∑–∞–ø–∏—Å—å –∫ –º–∞—Å—Ç–µ—Ä—É {booking.master_name} –Ω–∞ {booking.booking_datetime.strftime('%d.%m.%Y %H:%M')} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                    )
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {booking.user_id}.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {booking.user_id}: {e}")

            await callback_query.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await callback_query.message.edit_text(
                f"üî¥ –ó–∞–ø–∏—Å—å —Å ID {booking_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=admin_panel()
            )

    except SQLAlchemyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLAlchemy –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ {booking_id}: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )


@router_admin.callback_query(lambda c: c.data == "edit_price_list")
async def edit_price_list_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:")
    await state.set_state(PriceListState.waiting_for_description)


@router_admin.message(PriceListState.waiting_for_description)
async def process_price_list_description(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.")
        return

    await state.update_data(description=message.text)
    await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:")
    await state.set_state(PriceListState.waiting_for_photo)


@router_admin.message(PriceListState.waiting_for_photo)
async def process_price_list_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    description = data.get("description")

    if not message.photo:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.")
        return

    photo = message.photo[-1]
    file_id = photo.file_id

    try:
        file = await message.bot.get_file(file_id)
        os.makedirs("photos", exist_ok=True)
        extension = file.file_path.split('.')[-1]
        price_photo = f"photos/price_list_{file.file_id}.{extension}"
        await message.bot.download_file(file.file_path, destination=price_photo)

        with SessionFactory() as session:
            price_list = session.query(PriceList).first()
            if price_list:
                price_list.price_description = description
                price_list.price_photo = price_photo
            else:
                price_list = PriceList(price_description=description, price_photo=price_photo)
                session.add(price_list)
            session.commit()

        if price_message_id:
            await message.bot.edit_message_media(
                media=types.InputMediaPhoto(price_photo, caption=description),
                chat_id=message.chat.id,
                message_id=price_message_id
            )
            await message.answer("‚úÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
        else:
            await message.answer("‚úÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω, –Ω–æ –µ—â—ë –Ω–µ –±—ã–ª –æ—Ç–æ–±—Ä–∞–∂–µ–Ω.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞.")
    finally:
        await state.clear()


@router_admin.callback_query(lambda c: c.data == "get_price_list")
async def show_price_list(callback_query: CallbackQuery, state: FSMContext):
    global price_message_id
    try:
        if price_message_id:
            await callback_query.answer()

        with SessionFactory() as session:
            price_list = session.query(PriceList).first()

        if price_list:
            description = price_list.price_description
            price_photo = price_list.price_photo
            logger.debug(f"–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–∞–π–¥–µ–Ω. –û–ø–∏—Å–∞–Ω–∏–µ: {description}, –§–æ—Ç–æ: {price_photo}")

            back_button = InlineKeyboardButton(text=f"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
            buttons = [[back_button]]
            markup = InlineKeyboardMarkup(inline_keyboard=buttons)

            if os.path.exists(price_photo):
                input_file = FSInputFile(price_photo, filename=os.path.basename(price_photo))

                if price_message_id:
                    await callback_query.message.bot.edit_message_media(
                        media=types.InputMediaPhoto(input_file, caption=f"üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç: {description}"),
                        chat_id=callback_query.message.chat.id,
                        message_id=price_message_id,
                        reply_markup=markup
                    )
                else:
                    price_message = await callback_query.message.bot.send_photo(
                        callback_query.message.chat.id,
                        input_file,
                        caption=f"üìã: {description}",
                        reply_markup=markup
                    )
                    price_message_id = price_message.message_id
            else:
                if price_message_id:
                    await callback_query.message.bot.edit_message_text(
                        text=f"üìã: {description}",
                        chat_id=callback_query.message.chat.id,
                        message_id=price_message_id,
                        reply_markup=markup
                    )
                else:
                    await callback_query.message.bot.send_message(
                        callback_query.message.chat.id,
                        text=f"üìã –ü—Ä–∞–π—Å-–ª–∏—Å—Ç: {description}",
                        reply_markup=markup
                    )
        else:
            await callback_query.message.edit_text(
                "‚ö†Ô∏è –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=admin_panel()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞: {e}")
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=admin_panel()
        )

@router_admin.message(lambda message: isinstance(message.text, str) and message.text.lower() == 'get_price_list')
async def callback_get_price_list(callback_query: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    current_state = await state.get_state()
    logger.debug(f"Current FSM state: {current_state}")
    await show_price_list(callback_query.message)


@router_admin.callback_query(lambda c: c.data.startswith("calendar_"))
async def handle_calendar_navigation(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é.
    """
    try:
        _, master_id, year, month = callback_query.data.split("_")
        year, month = int(year), int(month)

        markup = await generate_calendar(master_id, year, month)
        await callback_query.message.edit_reply_markup(reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.", show_alert=True)